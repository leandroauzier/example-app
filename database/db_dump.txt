PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "migrations" ("id" integer not null primary key autoincrement, "migration" varchar not null, "batch" integer not null);
INSERT INTO migrations VALUES(1,'2014_10_12_000000_create_users_table',1);
INSERT INTO migrations VALUES(2,'2014_10_12_100000_create_password_resets_table',1);
INSERT INTO migrations VALUES(3,'2019_08_19_000000_create_failed_jobs_table',1);
INSERT INTO migrations VALUES(4,'2019_12_14_000001_create_personal_access_tokens_table',1);
INSERT INTO migrations VALUES(5,'2023_01_26_135601_create_series_table',1);
INSERT INTO migrations VALUES(6,'2023_01_26_185515_create_seasons_table',1);
INSERT INTO migrations VALUES(7,'2023_01_26_185543_create_episodes_table',1);
CREATE TABLE IF NOT EXISTS "users" ("id" integer not null primary key autoincrement, "name" varchar not null, "email" varchar not null, "email_verified_at" datetime, "password" varchar not null, "remember_token" varchar, "created_at" datetime, "updated_at" datetime);
CREATE TABLE IF NOT EXISTS "password_resets" ("email" varchar not null, "token" varchar not null, "created_at" datetime, primary key ("email"));
CREATE TABLE IF NOT EXISTS "failed_jobs" ("id" integer not null primary key autoincrement, "uuid" varchar not null, "connection" text not null, "queue" text not null, "payload" text not null, "exception" text not null, "failed_at" datetime default CURRENT_TIMESTAMP not null);
CREATE TABLE IF NOT EXISTS "personal_access_tokens" ("id" integer not null primary key autoincrement, "tokenable_type" varchar not null, "tokenable_id" integer not null, "name" varchar not null, "token" varchar not null, "abilities" text, "last_used_at" datetime, "expires_at" datetime, "created_at" datetime, "updated_at" datetime);
CREATE TABLE IF NOT EXISTS "series" ("id" integer not null primary key autoincrement, "nome" varchar not null, "created_at" datetime, "updated_at" datetime);
INSERT INTO series VALUES(9,'Lost','2023-01-27 18:11:36','2023-01-27 18:11:36');
CREATE TABLE IF NOT EXISTS "seasons" ("id" integer not null primary key autoincrement, "number" integer not null, "series_id" integer not null, "created_at" datetime, "updated_at" datetime, foreign key("series_id") references "series"("id") on delete cascade);
CREATE TABLE IF NOT EXISTS "episodes" ("id" integer not null primary key autoincrement, "number" integer not null, "season_id" integer not null, foreign key("season_id") references "seasons"("id") on delete cascade);
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('migrations',8);
INSERT INTO sqlite_sequence VALUES('series',9);
INSERT INTO sqlite_sequence VALUES('seasons',13);
INSERT INTO sqlite_sequence VALUES('episodes',34);
CREATE UNIQUE INDEX "users_email_unique" on "users" ("email");
CREATE UNIQUE INDEX "failed_jobs_uuid_unique" on "failed_jobs" ("uuid");
CREATE INDEX "personal_access_tokens_tokenable_type_tokenable_id_index" on "personal_access_tokens" ("tokenable_type", "tokenable_id");
CREATE UNIQUE INDEX "personal_access_tokens_token_unique" on "personal_access_tokens" ("token");
COMMIT;
